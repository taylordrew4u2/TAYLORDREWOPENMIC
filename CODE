# We'll construct the requested HTML from the previous answer and package it into a JSON file.
import json, textwrap, os, pathlib
html = """<!DOCTYPE html>

    left: 50%;

      startBtn.textContent = 'Pause';
    }
  }

  function updateImmediate() {
    const rem = remainingSeconds();
    timerEl.textContent = format(rem);
    if (rem <= 60 && !document.body.classList.contains('solid')) {
      timerEl.classList.add('red');
      document.body.classList.add('flash');
    } else {
      timerEl.classList.remove('red');
      document.body.classList.remove('flash');
    }
  }

  function tick() {
    rafId = requestAnimationFrame(tick);

    // if in solid-red phase, check exit
    if (document.body.classList.contains('solid')) {
      maybeLeaveSolid();
      return;
    }

    if (isRunning) {
      const rem = remainingSeconds();
      if (rem <= 0) {
        timerEl.textContent = "0:00";
        enterSolid();
        return;
      }
    }
    updateImmediate();
  }

  // Button wiring
  startBtn.addEventListener('click', toggleStart);
  upBtn.addEventListener('click', () => setRemaining(remainingSeconds() + 10));
  downBtn.addEventListener('click', () => setRemaining(remainingSeconds() - 10));
  exitBtn.addEventListener('click', tryExit);

  // Keep correct after backgrounding (page may throttle timers)
  document.addEventListener('visibilitychange', () => {
    // Recompute immediately on return
    updateImmediate();
  });
  window.addEventListener('focus', updateImmediate);
  window.addEventListener('resize', updateImmediate);
  window.addEventListener('orientationchange', updateImmediate);

  // Start paused at 5:00
  updateImmediate();
  cancelAnimationFrame(rafId);
  tick(); // kick off render loop

  // Auto-reset behavior after finish is handled in enterSolid()/maybeLeaveSolid()

})();
</script>
</body>
</html>
"""

payload = {
    "name": "TaylorDrewTimer",
    "files": {
        "index.html": html
    }
}

out_path = "/mnt/data/taylor_timer.json"
with open(out_path, "w", encoding="utf-8") as f:
    json.dump(payload, f, ensure_ascii=False, indent=2)

out_path
